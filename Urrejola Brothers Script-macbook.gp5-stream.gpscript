var directory : String = "/Volumes/Macintosh HD/Users/eloy/Documents/MidiFiles/"
var initializing, in_setlist_view: boolean
var UrrejolaPedalboard, MidiGuitarBlock : MidiInBlock
var TeensyMidiOut : MidiOutBlock
var AudioFilePlayer: PluginBlock
var MidiFilePlayer: PluginBlock
var OmnisphereInstrument: PluginBlock
var /*BassGuitarMixer,*/ /*AudioPlayerMixer,*/ MTuner: PluginBlock
var cycle_1, cycle_2, cycle_3, cycle_4: widget
var cycle_array: widget array = [cycle_1, cycle_2, cycle_3, cycle_4]
var root_4_label, cycle_4_label: widget
var chord_root_1, chord_root_2, chord_root_3, chord_root_4: widget
var chord_root_array: widget array = [chord_root_1, chord_root_2, chord_root_3, chord_root_4]

var output_volume_1, output_volume_2, output_volume_3, output_volume_4, output_volume_5, output_volume_6, use_pedal_as_volume: widget
var output_volume_array: widget array = [output_volume_1, output_volume_2, output_volume_3, output_volume_4, output_volume_5, output_volume_6]

var button_A, button_B, button_C, button_D: widget
var button_letter_array: widget array = [button_A, button_B, button_C, button_D]

var tuner_button, bass_button, octave_button, guitar_button, octave_amount, metronome_button: widget

var next_page_button, previous_page_button, next_song_button, next_page_led, previous_page_led: widget

var GuitarGain, Guitar, /*GuitarPitch,*/ /*GuitarAmp,*/ /*GuitarDelay,*/ /*GuitarReverb,*/ GuitarMidi, /*GuitarWah,*/ MIDIGuitarChannel: PluginBlock
//var guitar_plugins_to_bypass: PluginBlock array = [GuitarPitch]
/*var midi_instrument_velocity, guitar_midi_effect: widget*/

var bass_reverb_button, block_bass_reverb, auto_bass_reverb, octave_reverb_button, octave_reverb_amount, octave_reverb_length: widget

var select_bass, bass_name: widget
var bass_name_array: string array = ["Warwick", "Status"]

var midi_file, midi_player_track, midi_player_volume, midi_file_player_label, midi_file_playing, midi_file_stop_chords, midi_file_stop_chords_label: widget
var reset_button, stop_button: widget
var send_setlist: widget

//var /*guitar_delay_button, *//*guitar_amp_button,*/ guitar_reverb_button, guitar_delay_time, guitar_delay_feedback: widget*/
var /*guitar_delay_mix,*/ guitar_amp_preset, guitar_reverb_button, guitar_reverb_amount, guitar_reverb_length/*, guitar_midi_button*/: widget
var guitar_volume/*, guitar_background, guitar_wah_button, guitar_wah_depth*/: widget
var guitar_with_midi: widget

var foot_pedal, foot_pedal_switch, foot_pedal_filter: widget
var auto_move, auto_fade_in: widget

var chord_name_1, chord_name_2, chord_name_3, chord_name_4: widget
var chord_name_array: widget array = [chord_name_1, chord_name_2, chord_name_3, chord_name_4]
var next_chord_name_1, next_chord_name_2, next_chord_name_3, next_chord_name_4: widget
var next_chord_name_array: widget array = [next_chord_name_1, next_chord_name_2, next_chord_name_3, next_chord_name_4]

var button_A_group: widget array = [chord_name_1, next_chord_name_1, chord_root_1, cycle_1]
var button_B_group: widget array = [chord_name_2, next_chord_name_2, chord_root_2, cycle_2]
var button_C_group: widget array = [chord_name_3, next_chord_name_3, chord_root_3, cycle_3]
var button_D_group: widget array = [chord_name_4, next_chord_name_4, chord_root_4, cycle_4, root_4_label, cycle_4_label]
var midi_file_player_group: widget array = [midi_player_track, midi_player_volume, midi_file_player_label, midi_file_stop_chords, midi_file_stop_chords_label]

var midi_button: widget
var midi_channel, midi_volume, midi_alt_bass: widget

var midi_mixer_volume: widget

//var out_mode, out_midi_L, out_midi_R, out_bass_L, out_bass_R: widget

var knob_audio_track, knob_audio_volume, slider_audio_position, button_audio_switch: widget
var audio_array: widget array = [knob_audio_track, knob_audio_volume, slider_audio_position]

var audio_fade_out, start_fade_out, audio_volume_auto: widget

var knob_widget_array: widget array = [guitar_amp_preset, midi_channel]
var knob_widget_label_array: string array = ["preset", "ch"]
var knob_widget_range_array: integer array = [10, 10]
var knob_widget_label_before: boolean array = [true, true]
var knob_widget_start_by_zero_array: boolean array = [false, false]

var modern_chord_names: string array = ["C", "Db", "D", "Eb", "E", "F", "Gb", "G", "Ab", "A", "Bb", "B"]
var number_of_tracks : Integer
var song_name : String
var midi_sequence : MidiSequence
var midi_file_name : String
var last_track_number : Integer = -1
var last_chord : MidiMessage array = []
var current_chord_number: integer = 0
var last_variation : string = "-1"
var current_variation, current_setlist : string
var bass_reverb_saved: Boolean = false
var filter_off_value: double = 0.6
var filter_on_value: double = 0.0
var letters: string array = ["A", "B", "C", "D"]
var chord_player_triggered: integer = -1

var start_time: double
var delayed_widgets: widget array
var variation_time: double
var events_allowed: boolean

var current_chord: MidiMessage array
var track_notes: MidiMessage array
var chord_positions: integer array
var chord_lengths: integer array
var chord_names: string array
var current_letter_index: integer

var current_midi_page_array: integer array = [200, 200]

// chord panel
var panel_chord_1, panel_chord_2, panel_chord_3, panel_chord_4, panel_chord_5, panel_chord_6, panel_chord_7, panel_chord_8, panel_chord_9, panel_chord_10, panel_chord_11, panel_chord_12, panel_chord_13, panel_chord_14, panel_chord_15, panel_chord_16: widget
var panel_chord_array: widget array = [panel_chord_1, panel_chord_2, panel_chord_3, panel_chord_4, panel_chord_5, panel_chord_6, panel_chord_7, panel_chord_8, panel_chord_9, panel_chord_10, panel_chord_11, panel_chord_12, panel_chord_13, panel_chord_14, panel_chord_15, panel_chord_16]
var panel_chord_row_1, panel_chord_row_2: widget;
var panel_chord_row_array: widget array = [panel_chord_row_1, panel_chord_row_2]
var panel_chord_on_value: double = 1.0
var panel_chord_off_value: double = 0.5
var panel_chord_empty_value: double = 0.0
var panel_chord_row_on_value: double = 0.6
var panel_chord_row_off_value: double = 0.0
var panel_chord_shift: integer
var panel_chord_columns: integer = 8

var letter_array: string array
var pedal_margin_range: integer = 4
var general_midi_volume: double = 0.707;

var press_track_button: boolean = true;

function indexOfStringArray(text: string array, search: string) returns integer
    var x: integer
    var return: integer = -1
    
    for x=0; x<Size(text); x=x+1 do
        if text[x] == search then
            return = x
        end
    end
    result = return
end

// Parse time value (integer in ms) to timestamp-string (hh:mm:ss)
function intToTimestamp (time_seconds : Integer) Returns String
    var num_h, num_m, num_s, rest : Integer
    var str_h, str_m, str_s : String
    
    //hours
    num_h = Floor(time_seconds / 3600)
    rest = time_seconds - (num_h * 3600)
    str_h = IntToString(num_h)
    if num_h < 10 then
        str_h = "0" + str_h
    end

    //extract minutes from total length Integer value
    num_m = Floor(rest / 60)
    rest = rest - (num_m * 60)
    str_m = IntToString(num_m)
    if num_m < 10 then
        str_m = "0" + str_m
    end
    
    //extract seconds from total length Integer value
    num_s = rest % 60
    str_s = IntToString(num_s)
    if num_s < 10 then
        str_s = "0" + str_s
    end
    
    //assemble whole timestamp-string
    result = str_m + ":" + str_s
end

function showOrHideWidgetGroup(widget_group: widget array, hide: boolean)
    var x: integer

    for x=0; x<Size(widget_group); x=x+1 do
        SetWidgetHideOnPresentation(widget_group[x], hide)
    end
end

function showOrHideMidiFilePlayer()
    if GetWidgetValue(midi_file) == 1 then
        showOrHideWidgetGroup(midi_file_player_group, false)
    else
        showOrHideWidgetGroup(midi_file_player_group, true)
    end
end

function setChordLetterValues(number_of_tracks: integer)
    var x: integer
    var hide_button: boolean
    
    for x=0; x<4; x=x+1 do
        hide_button = true
        if x < number_of_tracks then
            hide_button = false
        end
        if x == 0 then
            showOrHideWidgetGroup(button_A_group, hide_button)
        end
        if x == 1 then
            showOrHideWidgetGroup(button_B_group, hide_button)
        end
        if x == 2 then
            showOrHideWidgetGroup(button_C_group, hide_button)
        end
        if x == 3 then
            showOrHideWidgetGroup(button_D_group, hide_button)
        end
    end
    showOrHideMidiFilePlayer()
end

function getSongNameFromVariationName(variation_name: string) returns string
    var song_name: string
    
    song_name = StringUpToFirstOccurrence(variation_name, " - ", false, false)
    result = song_name
end

function loadMidiFile()
    var variation_name: string
    
    number_of_tracks = 0
    variation_name = GetVariationName(GetCurrentVariation())
    song_name = getSongNameFromVariationName(variation_name)
    midi_file_name = directory + ReplaceString(song_name, " ", "_", false) + ".mid"
    if FileExists(midi_file_name) then
        MidiSequence_LoadStandardMidiFile(midi_sequence, midi_file_name)
        MidiSequence_Quantize(midi_sequence, 1)
        number_of_tracks = MidiSequence_GetTrackCount(midi_sequence)
    end
    setChordLetterValues(number_of_tracks)
end

function setBassName()
    SetWidgetLabel(bass_name, bass_name_array[Round(GetWidgetValue(select_bass))])
end

/*Initialization
    var switch: boolean
    
    if InSetlistMode() then
        switch = SwitchToSongByIndex(0,0)
    else
        SetVariation(0)
    end
    SetTimeSignatureNumerator(4)
    SetTimeSignatureDenominator(4)
    //current_midi_page_value = 200
end*/

function setTrackButtonOff(track_number: integer)
    if track_number >= 0 then
        if GetWidgetValue(button_letter_array[track_number]) == 1 then
            press_track_button = false
            SetWidgetValue(button_letter_array[track_number], 0)
        end
        SetWidgetLabel(chord_name_array[track_number], "")
        SetWidgetLabel(next_chord_name_array[track_number], "")
    end
end

function setTrackButtonsOff()
    var x: integer
    for x=0; x<4; x=x+1 do
        setTrackButtonOff(x)
    end
    current_chord_number = 0
end

function removePanelChords()
    var x: integer

    for x=0; x<Size(panel_chord_array); x=x+1 do
        SetWidgetLabel(panel_chord_array[x], "")
        SetWidgetValue(panel_chord_array[x], panel_chord_empty_value)
    end
end

function drawPanelRows()
    var x, row: integer

    for x=0; x<Size(panel_chord_row_array); x=x+1 do
        row = x + 1 + panel_chord_shift
        SetWidgetLabel(panel_chord_row_array[x], row)
        if (Size(chord_positions) > 0) and (row < 2 || Size(chord_positions) > panel_chord_columns) then
            SetWidgetValue(panel_chord_row_array[x], panel_chord_row_on_value)
        else
            SetWidgetValue(panel_chord_row_array[x], panel_chord_row_off_value)
        end
    end
end

function stopMidiPlayer()
    SetParameter(MidiFilePlayer, 3, 0)
    SetWidgetValue(button_D, 0)
end

function resetPanelChords()
    removePanelChords()
    panel_chord_shift = 0
    drawPanelRows()
end

// ===================== CHORD NAMING ===================
function getNoteNumber(note: MidiMessage) returns integer
    var note_message: NoteMessage = ReinterpretAsNoteOnMessage(note)
    var note_number: integer = GetNoteNumber(note_message)
    result = note_number % 12
end

function getKeynoteNumber(chord: MidiMessage array) returns integer
    var keynote: MidiMessage = chord[0]
    result = getNoteNumber(keynote)
end

function getThird(chord: MidiMessage array, keynote_number: integer) returns string
    var x: integer
    var third_minor: integer = (keynote_number + 3) % 12
    var third_major: integer = (keynote_number + 4) % 12
    var is_major: boolean = false
    var is_minor: boolean = false
    for x=0; x<Size(chord); x=x+1 do
        if getNoteNumber(chord[x]) == third_major then
            is_major = true
        end
        if getNoteNumber(chord[x]) == third_minor then
            is_minor = true
        end
    end
    result = ""
    if is_major then
        result = "major"
    elsif is_minor then
        result = "minor"
    end
end

function getFifth(chord: MidiMessage array, keynote_number: integer) returns string
    var x: integer
    var fifth_dim: integer = (keynote_number + 6) % 12
    var fifth_per: integer = (keynote_number + 7) % 12
    var fifth_aug: integer = (keynote_number + 8) % 12
    var is_dim: boolean = false;
    var is_per: boolean = false;
    var is_aug: boolean = false;
    for x=0; x<Size(chord); x=x+1 do
        if getNoteNumber(chord[x]) == fifth_per then
            is_per = true
        end
        if getNoteNumber(chord[x]) == fifth_dim then
            is_dim = true
        end
        if getNoteNumber(chord[x]) == fifth_aug then
            is_aug = true
        end
    end
    result = ""
    if is_per then
        result = "perfect"
    elsif is_dim then
        result = "dim"
    elsif is_aug then
        result = "aug"
    end
end

function getSeventh(chord: MidiMessage array, keynote_number: integer) returns string
    var x: integer
    var seventh_dim: integer = (keynote_number + 9) % 12
    var seventh_minor: integer = (keynote_number + 10) % 12
    var seventh_major: integer = (keynote_number + 11) % 12
    var is_dim: boolean = false
    var is_minor: boolean = false
    var is_major: boolean = false
    for x=0; x<Size(chord); x=x+1 do
        if getNoteNumber(chord[x]) == seventh_major then
            is_major = true
        end
        if getNoteNumber(chord[x]) == seventh_minor then
            is_minor = true
        end
        if getNoteNumber(chord[x]) == seventh_dim then
            is_dim = true
        end
    end
    result = ""
    if is_major then
        result = "major"
    elsif is_minor then
        result = "minor"
    elsif is_dim then
        result = "dim"
    end
end

function getChordName(chord: MidiMessage array) returns string
    var keynote_number: integer = getKeynoteNumber(chord)
    var third: string = getThird(chord, keynote_number)
    var fifth: string = getFifth(chord, keynote_number)
    var seventh: string = getSeventh(chord, keynote_number)
    var type_text, chord_name: string = ""
    if third == "minor" then
        type_text = "m"
        if fifth == "dim" then
            type_text = "dim"
            if seventh == "major" then
                type_text = "dimMaj7"
            elsif seventh == "minor" then
                type_text = "m7(b5)"
            elsif seventh == "dim" then
                type_text = "dim7"
            end
        elsif fifth == "perfect" then
            type_text = "m"
            if seventh == "major" then
                type_text = "mMaj7"
            elsif seventh == "minor" then
                type_text = "m7"
            elsif seventh == "dim" then
                type_text = "m6"
            end
        end
    elsif third == "major" then
        if fifth == "dim" then
            type_text = "b5"
        elsif fifth == "perfect" or fifth == "" then
            if seventh == "major" then
                type_text = "Maj7"
            elsif seventh == "minor" then
                type_text = "7"
            elsif seventh == "dim" then
                type_text = "6"
            end
        elsif fifth == "aug" then
            type_text = "+"
            if seventh == "major" then
                type_text = "Maj7#5"
            elsif seventh == "minor" then
                type_text = "+7"
            elsif seventh == "dim" then
                type_text = "+6"
            end
        end
    end
    chord_name = modern_chord_names[keynote_number] + type_text
    result = chord_name
end
// ==============================================

// =============== SysEx messages ===============
function replaceTildes(message: string) returns string
    message = ReplaceString(message, "á", "&a", true)
    message = ReplaceString(message, "é", "&e", true)
    message = ReplaceString(message, "í", "&i", true)
    message = ReplaceString(message, "ó", "&o", true)
    message = ReplaceString(message, "ú", "&u", true)
    result = message
end

function sendSysexMessage(message: string)
    var prefix: string = "F0"
    var text: string
    var SysEx : SysexMessage
    
    text = prefix + StringToHexString(replaceTildes(message)) + "F7"
    SysEx = text
    SendSysexExternal(TeensyMidiOut, SysEx)
end

function sendChordOffToMidiDevice(chord: MidiMessage Array)
    var index : Integer
    for index = 0; index < Size(chord); index = index + 1 do
        UrrejolaPedalboard.SendNow(ReinterpretAsNoteOffMessage(chord[index]))
    end
    sendSysexMessage("chord:0")
end

function sendChordToMidiDevice(chord: MidiMessage Array)
    var index : Integer
    for index = 0; index < Size(chord); index = index + 1 do
        UrrejolaPedalboard.SendNow(chord[index])
    end
    if current_chord_number > 0 then
        sendSysexMessage("chord:" + chord_names[current_chord_number - 1])
    end
end
// ==============================================


function drawPanelChords()
    var x, y: integer
    var chord: MidiMessage array

    removePanelChords()
    drawPanelRows()
    for x=panel_chord_columns*panel_chord_shift; x<Size(chord_positions); x=x+1 do
        chord = []
        for y=chord_positions[x]; y<chord_positions[x]+chord_lengths[x]; y=y+1 do
            chord <-- track_notes[y]
        end
        if Size(chord) > 2 and (x - panel_chord_columns*panel_chord_shift) < Size(panel_chord_array) then
            SetWidgetLabel(panel_chord_array[x - panel_chord_columns*panel_chord_shift], getChordName(chord))
            SetWidgetValue(panel_chord_array[x - panel_chord_columns*panel_chord_shift], panel_chord_off_value)
        end
    end
end

function setPanelChordOn(chord_number: integer)
    var x: integer
    if (Size(chord_positions) > Size(panel_chord_array))
            and chord_number % panel_chord_columns == 0
            and chord_number < Size(chord_positions) - panel_chord_columns - 1
            and chord_number > 0 then
        panel_chord_shift = panel_chord_shift + 1
        drawPanelChords()
    end

    for x=panel_chord_columns*panel_chord_shift; x-panel_chord_columns*panel_chord_shift < Size(panel_chord_array); x=x+1 do
        if (x == chord_number) then
            SetWidgetValue(panel_chord_array[x - panel_chord_columns*panel_chord_shift], panel_chord_on_value)
        elsif x < Size(chord_lengths) then
            SetWidgetValue(panel_chord_array[x - panel_chord_columns*panel_chord_shift], panel_chord_off_value)
        else
            SetWidgetValue(panel_chord_array[x - panel_chord_columns*panel_chord_shift], panel_chord_empty_value)
        end
    end
end

function getTrackNotes(track_number: integer)
    var chord_events : MidiMessage Array = []
    var end_of_file: boolean = false
    var chord: MidiMessage array
    var index: integer
    var chord_index: integer = 0

    track_notes = []
    chord_positions = []
    chord_lengths = []
    chord_names = []
    while !end_of_file do
        MidiSequence_CollectEventsNow(midi_sequence)
        chord_events = MidiSequence_GetCurrentEvents(midi_sequence, track_number)
        chord = []
        for index = 0; index < Size(chord_events); index = index + 1 do
            if IsNoteOn(chord_events[index]) then
                chord <-- chord_events[index]
            end
        end
        if Size(chord) > 0 then
            chord_positions <-- Size(track_notes)
            chord_lengths <-- Size(chord)
            chord_names <-- getChordName(chord)
        end
        for index = 0; index < Size(chord); index = index + 1 do
            track_notes <-- chord[index]
        end

        if Size(chord_events) == 0 then
            end_of_file = true
        end
        chord_index = chord_index + 1
    end
    MidiSequence_ResetToStart(midi_sequence)
end

function getCurrentChord()
    var x: integer

    current_chord = []
    if Size(chord_positions) > current_chord_number then
        for x=chord_positions[current_chord_number]; x<chord_positions[current_chord_number]+chord_lengths[current_chord_number]; x=x+1 do
            if GetWidgetValue(chord_root_array[last_track_number]) == 1 or x > chord_positions[current_chord_number] then
                current_chord <-- track_notes[x]
            end
        end
        current_chord_number = current_chord_number + 1
    else
        current_chord_number = 0
        if GetWidgetValue(cycle_array[last_track_number]) == 1 then
            getCurrentChord()
        end
    end
    setPanelChordOn(current_chord_number - 1)
    last_chord = current_chord
end

function getTrackChords(track_number: integer)
    getTrackNotes(track_number)
end

function playChord(track_number: Integer)
    if current_chord_number == 0 then
        drawPanelChords()
    end
    sendChordOffToMidiDevice(last_chord)
    getCurrentChord()
    sendChordToMidiDevice(current_chord)

    if Size(current_chord) == 0 then
        setTrackButtonOff(track_number)
        //removePanelChords()
        resetPanelChords()
    end
    if current_chord_number > 0 then

        SetWidgetLabel(chord_name_array[track_number], chord_names[current_chord_number - 1])

        if Size(chord_names) > current_chord_number then
            SetWidgetLabel(next_chord_name_array[track_number], chord_names[current_chord_number])
        else
            SetWidgetLabel(next_chord_name_array[track_number], "")
        end
    end
end

function playChordSequence(track_number: integer)
    if track_number < number_of_tracks then
        if track_number != last_track_number Or current_variation != last_variation then
            setTrackButtonOff(last_track_number)
            last_track_number = track_number
            current_chord_number = 0
            panel_chord_shift = 0
            getTrackChords(track_number)
            drawPanelRows()
        end
        last_variation = current_variation
        playChord(track_number)
    end
end

// ==================================

function switchDelayedWidgetOn(widget_button: Widget)
    SetWidgetValue(widget_button, 1)
    delayed_widgets[Size(delayed_widgets)] = widget_button
    start_time = TimeSinceStartup()
end

function switchButtonOn(widget_button: Widget)
    SetWidgetValue(widget_button, 1)
end

function switchButtonOff(widget_button: Widget)
    SetWidgetValue(widget_button, 0)
end

function switchButton(widget_button: Widget)
    SetWidgetValue(widget_button, 1 - GetWidgetValue(widget_button))
end

function setMidiInstrument(newValue: double)
    if GetWidgetValue(midi_channel) > 0 and newValue == 1 then
        SetPluginBypassed(GuitarMidi, false)
        SetPluginBypassed(OmnisphereInstrument, false)
        SetParameter(MIDIGuitarChannel, 1, (GetWidgetValue(midi_channel) * 10 - 1) / 15)
        //OpenPlugin(GuitarMidi)
        //SetPluginEditorXYPosition(GuitarMidi, 0, 500)
    else
        SetPluginBypassed(GuitarMidi, true)
        SetPluginBypassed(OmnisphereInstrument, true)
        //ClosePlugin(GuitarMidi)
    end
end

/*function sendGuitarAmpPreset(preset_value: Double)
    SendNow(UrrejolaPedalboard, MakeProgramChangeMessage(Round(preset_value * 10)))
end*/

function setGuitarPreset()
    SetParameter(GuitarGain, 0, GetWidgetValue(guitar_volume))
    /*if GetWidgetValue(guitar_amp_button) == 1 then
        SetPluginBypassed(GuitarAmp, false)
        sendGuitarAmpPreset(GetWidgetValue(guitar_amp_preset))
    else
        SetPluginBypassed(GuitarAmp, true)
    end*/
    
    /*if GetWidgetValue(guitar_delay_button) == 1 then
        SetPluginBypassed(GuitarDelay, false)
        SetParameter(GuitarDelay, 1, GetWidgetValue(guitar_delay_time))
        SetParameter(GuitarDelay, 6, GetWidgetValue(guitar_delay_feedback))
        SetParameter(GuitarDelay, 7, GetWidgetValue(guitar_delay_mix))
    else
         SetPluginBypassed(GuitarDelay, true)
    end*/
    

    SetParameter(Guitar, 146, GetWidgetValue(guitar_reverb_button))
    if GetWidgetValue(guitar_reverb_button) == 1 then
        //SetPluginBypassed(GuitarReverb, false)
        SetParameter(Guitar, 141, GetWidgetValue(guitar_reverb_amount))
        SetParameter(Guitar, 143, GetWidgetValue(guitar_reverb_length))
    else
        //SetPluginBypassed(GuitarReverb, true)
    end

    /*if GetWidgetValue(guitar_midi_button) == 1 then
        switchButtonOn(midi_button)
    else
        switchButtonOff(midi_button)
    end*/
    
    /*if GetWidgetValue(guitar_wah_button) == 1 then
        SetPluginBypassed(GuitarWah, false)
        SetParameter(GuitarWah, 6, GetWidgetValue(guitar_wah_depth))
    else
        SetPluginBypassed(GuitarWah, true)
    end*/
end

/*function switchGuitarPluginsOff()
    var x: integer
    
    for x=0; x<Size(guitar_plugins_to_bypass); x=x+1 do
        SetPluginBypassed(guitar_plugins_to_bypass[x], true)
    end
end*/

function switchGuitarOff()
    SetParameter(GuitarGain, 1, 1)
    //switchGuitarPluginsOff()
end

function switchOctaveOn()
    if GetWidgetValue(block_bass_reverb) == 0 then
        if GetWidgetValue(auto_bass_reverb) == 1 And GetWidgetValue(bass_reverb_button) == 1 then
            bass_reverb_saved = true
        end
        SetWidgetValue(bass_reverb_button, 0)
    end
    SetParameter(GuitarGain, 0, GetWidgetValue(octave_amount))
    SetParameter(GuitarGain, 1, 0)
    //SetPluginBypassed(GuitarAmp, true)
    
    //SetPluginBypassed(GuitarPitch, false)
    
    SetParameter(Guitar, 146, GetWidgetValue(octave_reverb_button))
    SetParameter(Guitar, 141, GetWidgetValue(octave_reverb_amount))
    SetParameter(Guitar, 143, GetWidgetValue(octave_reverb_length))
    //SetPluginBypassed(GuitarReverb, false)
end

function switchOctaveOff()
    SetParameter(GuitarGain, 1, 1)
    //switchGuitarPluginsOff()
    if bass_reverb_saved then
        SetWidgetValue(bass_reverb_button, 1)
        bass_reverb_saved = false
    end
end

function switchGuitarOn()
    SetParameter(GuitarGain, 1, 0)
    //SetPluginBypassed(GuitarPitch, false)
    setGuitarPreset()
end

function setGuitarOff()
    SetWidgetValue(guitar_button, 0)
    switchGuitarOff()
end

function setOctaveOn()
    SetWidgetValue(octave_button, 1)
    switchOctaveOn()
end

function setOctaveOff()
    SetWidgetValue(octave_button, 0)
end

function setKnobLabel(w: Widget, label_text:String, value: Integer, label_before: boolean, start_by_zero: boolean)
    var label: String = label_text
    var is_on: boolean
    
    is_on = false
    if value > 0 then
        if start_by_zero then
            value = value - 1
        end
        label = label_text + " " + value
        if !label_before then
            label = "" + value + " " + label_text
        end
        is_on = true
    end
    SetWidgetLabel(w, label)
end

function startMidiPlayer()
    if GetWidgetValue(midi_file_stop_chords) == 1 then
        setTrackButtonOff(last_track_number)
        last_track_number = -1
        current_chord_number = 0
        panel_chord_shift = 0
        removePanelChords()
        sendChordOffToMidiDevice(last_chord)
    end

    SetParameter(MidiFilePlayer, 3, 1)
    SetParameter(MidiFilePlayer, 8, 1)
    SetWidgetValue(midi_file_playing, 1) // al cambiar de parte a veces no se activa
end

function reset()
    sendChordOffToMidiDevice(last_chord)
    setTrackButtonsOff()
    resetPanelChords()
    last_chord = []
    last_track_number = -1
    stopMidiPlayer()
end

function setInstrumentFromPedal(newValue: double)
    var value: integer = Round(newValue * 127)
    
    if events_allowed then
        if value > 127 - pedal_margin_range then
            switchButtonOn(guitar_button)
        elsif value > pedal_margin_range then
            switchButtonOff(octave_button)
            switchButtonOff(guitar_button)
            switchButtonOn(bass_button)
        else
            switchButtonOn(octave_button)
        end
    end
end

function setFootPedalFilter(newValue: double)
    if newValue == 1 then
        switchButtonOff(foot_pedal_filter)
    else
        switchButtonOn(foot_pedal_filter)
    end
end

function setMidiVolume(newValue: double)
    var index: integer
    var value: double
    
    value = 0
    if newValue > 0 then
        value = newValue * general_midi_volume
    end
    SetWidgetValue(midi_mixer_volume, value)
end

function sendSetlist()
    var song_list: string = ""
    var x: integer

    for x=0; x<GetSongCount(); x=x+1 do
        if x > 0 then
            song_list = song_list + "|"
        end
        song_list = song_list + GetSongName(x)
    end
    sendSysexMessage("list:" + GetCurrentSetlistName() + "%" + song_list)
end

function sendSongAndParts()
    var song_and_parts: string
    var x: integer

    song_and_parts = "" + GetCurrentSongIndex()
    //if GetSongPartCount() > 1 then
        song_and_parts = song_and_parts + "-" + IntToString(GetCurrentSongPart()) + "%"
        for x=0; x<GetSongPartCount(); x=x+1 do
            if x > 0 then
                song_and_parts = song_and_parts + "|"
            end
            song_and_parts = song_and_parts + GetSongPartName(x)
        end
    //end
    sendSysexMessage("song:" + song_and_parts)
end

function chordButtonPressed(track_index: int)
    if GetWidgetValue(foot_pedal) > 0 and track_index == 0 and current_chord_number == 0 and GetWidgetValue(auto_fade_in) == 1 and GetWidgetValue(auto_move) == 0 then
        // prepara fade in
        general_midi_volume = 0.707
        SetWidgetValue(foot_pedal, 0)
        SetWidgetLabel(chord_name_array[track_index], "fade in")
        SetWidgetLabel(next_chord_name_array[track_index], "ready")
    else
        if track_index == 0 and current_chord_number == 0 and GetWidgetValue(auto_fade_in) == 1 and GetWidgetValue(auto_move) == 0 then
            // lanza fade in
            switchButtonOn(auto_move)
            //switchButtonOff(auto_fade_in)
        end
        if track_index == 3 and GetWidgetValue(midi_file) == 1 then
            startMidiPlayer()
        elsif GetWidgetValue(midi_file) == 1 and GetWidgetValue(button_letter_array[3]) == 1 then
            chord_player_triggered = track_index
            SetParameter(MidiFilePlayer, 8, 0)
        elsif chord_player_triggered < 0 then
            if GetWidgetValue(audio_fade_out) == 1 then
                ResetWidgetValue(audio_volume_auto)
            end
            playChordSequence(track_index)
        end
    end
end

function startAllProcesses(new_var: int)
    var x: integer
    var tracks: integer array
    var bypassed: boolean
    var new_variation: string

    setFootPedalFilter(GetWidgetValue(foot_pedal_switch))
    
    SetTimersRunning(true)

    sendSysexMessage("time:" + IntToString(Round(ClockTime() / 1000)))

    loadMidiFile()
    new_variation = IntToString(new_var)
    if InSetlistMode() then
        if current_setlist != GetCurrentSetlistName() then
            current_setlist = GetCurrentSetlistName()
            sendSetlist()
        end

        new_variation = song_name + "-" + IntToString(GetCurrentSongPart())
        sendSongAndParts()
    end
    last_variation = current_variation
    current_variation = new_variation
    //last_track_number = -1

    bass_reverb_saved = false
    chord_player_triggered = -1

    resetPanelChords()
    
    // bypass audio players we don't need
    /*tracks = []
    for x=0; x<2; x=x+1 do
        tracks[x] = Round(GetWidgetValue(play_track_array[x]) * audio_track_length)
    end
    for x=0; x<12; x=x+1 do
        bypassed = true
        if IndexOf(tracks, x + 1) != -1 then
            bypassed = false
        end
        //SetPluginBypassed(song_player_array[x], bypassed)
    end*/
    // fin bypass
    
    if GetWidgetValue(guitar_button) == 1 then
        switchGuitarOn()
    else
        switchGuitarOff()
    end
    
    setBassName()

    for x=0; x<Size(knob_widget_array); x=x+1 do
        setKnobLabel(knob_widget_array[x], knob_widget_label_array[x], Round(GetWidgetValue(knob_widget_array[x]) * knob_widget_range_array[x]), knob_widget_label_before[x], knob_widget_start_by_zero_array[x])
    end
    showOrHideMidiFilePlayer()
end

// ================ EVENTS ================

Initialization
    initializing = true;
    if !InSetlistMode() then
        in_setlist_view = false
        SwitchToSetlistView()
    end
end

on Variation (old_var : Int, new_var : Int)
    var switch: boolean

    if !in_setlist_view then
        in_setlist_view = true
    end

    if initializing then
        initializing = false
        switch = SwitchToSongByIndex(0,0)
        SetTimeSignatureNumerator(4)
        SetTimeSignatureDenominator(4)
        reset()
    end

    events_allowed = false
    variation_time = TimeSinceStartup()
    startAllProcesses(new_var)
end

on WidgetValueChanged (newValue : Double) from select_bass
    setBassName()
end

on WidgetValueChanged (newValue : Double) from reset_button
    if newValue == 1 then
        switchDelayedWidgetOn(reset_button)
        if GetWidgetValue(audio_fade_out) == 1 then
            SetWidgetValue(start_fade_out, 1)
        else
            reset()
        end
    end
end

on WidgetValueChanged (newValue : Double) from audio_volume_auto
    if GetWidgetValue(auto_fade_in) == 0 and newValue < 0.1 then
        // solo en fade out, no en fade in
        reset()
    end
end

on WidgetValueChanged (newValue: double) from auto_move
    if newValue == 0 then
        switchButtonOff(auto_fade_in)
    end
end

on WidgetValueChanged (newValue : Double) from stop_button
    if newValue == 1 then
        switchDelayedWidgetOn(stop_button)
    end
end

on WidgetValueChanged (newValue: Double) From tuner_button
    if newValue == 1 then
        OpenPlugin(MTuner)
        SetPluginEditorXYPosition(MTuner, 0, 0)
    else
        ClosePlugin(MTuner)
    end
end

on WidgetValueChanged (newValue : Double) from bass_button
    if newValue == 0 then
        if GetWidgetValue(octave_button) == 1 then
            //setOctaveOff()
        end
    end
end

on WidgetValueChanged (newValue : Double) from octave_button
    if newValue == 1 then
        SetWidgetValue(bass_button, 1)
        setGuitarOff()
        switchOctaveOn()
    elsif GetWidgetValue(guitar_button) == 0 then
        switchOctaveOff()
    end
end

on WidgetValueChanged (newValue : Double) from guitar_button
    if events_allowed then
        if newValue == 1 then
            setOctaveOff()
            switchGuitarOn()
            if GetWidgetValue(midi_channel) > 0 and GetWidgetValue(guitar_with_midi) == 1 then
                switchButtonOn(midi_button)
            end
            SetWidgetValue(bass_button, 0)
        elsif GetWidgetValue(octave_button) == 0 then
            SetWidgetValue(bass_button, 1)
            switchGuitarOff()
            if GetWidgetValue(midi_channel) > 0 and GetWidgetValue(guitar_with_midi) == 1 then
                switchButtonOff(midi_button)
            end
        end
    end
end

on WidgetValueChanged (newValue : Double) from midi_button
    if GetWidgetValue(midi_channel) > 0 then
        // MIDI
        setMidiInstrument(newValue)
        if GetWidgetValue(midi_alt_bass) == 1 then
            SetWidgetValue(bass_button, 1 - GetWidgetValue(midi_button))
        end
    end
end

on WidgetValueChanged (newValue: double) from button_audio_switch
    showOrHideWidgetGroup(audio_array, newValue == 0)
end

on WidgetValueChanged (newValue : Double) from metronome_button
    if newValue == 1 then
        EnableMetronome(true)
        EnablePlayhead(true)
    else
        EnableMetronome(false)
        EnablePlayhead(false)
    end
end

on WidgetValueChanged (w: Widget, track_index: Integer, newValue: Double) from button_A, button_B, button_C, button_D
    if newValue == 1 then
        chordButtonPressed(track_index)
    else
        if press_track_button then
            SetWidgetValue(button_letter_array[track_index], 1)
        else
            press_track_button = true
        end
    end
end

on WidgetValueChanged (newValue: double) from midi_file
    showOrHideMidiFilePlayer()
end

on WidgetValueChanged (w: Widget, index: Integer, newValue: Double) from block_bass_reverb, auto_bass_reverb
    if newValue == 1 then
        if index == 0 then
            SetWidgetValue(auto_bass_reverb, 0)
        else
            SetWidgetValue(block_bass_reverb, 0)
        end
    end
end

/*on NoteOnEvent (m : NoteMessage) From MidiGuitarBlock
    var effect: double = GetWidgetValue(guitar_midi_effect)
    var velocity: double = GetVelocity(m)
    var volume: double
    var distance: double
    var initial_volume: double = GetWidgetValue(midi_volume) * 127

    distance = velocity - initial_volume
    volume = (initial_volume + (distance * effect)) / 127
    SetWidgetValue(midi_instrument_velocity, volume)
end*/

//on ControlChangeEvent (cc : ControlChangeMessage) Matching 90 From UrrejolaPedalboard
on ProgramChangeEvent(pc : ProgramChangeMessage) From UrrejolaPedalboard
    var pc_number: integer = GetProgramChangeNumber(pc)
    var switched : boolean

    if InSetlistMode() then
        switched = SwitchToSongByIndex(pc_number, 0) 
    end
end

on WidgetValueChanged (newValue : Double) from midi_file_playing
    var chord_player_index: integer

    if chord_player_triggered >= 0 and newValue == 0.0 then
        chord_player_index = chord_player_triggered
        chord_player_triggered = -1
        if GetWidgetValue(button_D) == 1 then
            press_track_button = false
            SetWidgetValue(button_D, 0)
        end
        chordButtonPressed(chord_player_index)
    end
end

on WidgetValueChanged (newValue: double) from foot_pedal
    if GetWidgetValue(foot_pedal_switch) == 1 then
        if GetWidgetValue(use_pedal_as_volume) == 1 then
            setMidiVolume(newValue)
        else
            setInstrumentFromPedal(newValue)
        end
    end
end

on WidgetValueChanged (newValue: double) from foot_pedal_switch
    setFootPedalFilter(newValue)
end

on WidgetValueChanged (newValue: double) from send_setlist
    if newValue == 1 and InSetlistMode() then
        sendSetlist()
        //sendSongAndPart()
        sendSongAndParts()
        switchButtonOff(send_setlist);
    end
end

on WidgetValueChanged (w: Widget, index: Integer, newValue: Double) from next_page_button
    switchDelayedWidgetOn(next_page_led);
end

on WidgetValueChanged (w: Widget, index: Integer, newValue: Double) from previous_page_button
    switchDelayedWidgetOn(previous_page_led);
end

on WidgetValueChanged (w: Widget, index: Integer, newValue: Double) from next_song_button
    switchDelayedWidgetOn(next_page_led);
end

on WidgetValueChanged (w: Widget, index: Integer, newValue: Double) from guitar_amp_preset, midi_channel
    var rounded_value : Double
    var new_value: Double
    var steps: integer = knob_widget_range_array[index]

    rounded_value = IntToFloat(Round(newValue * steps)) / steps
    new_value = IntToFloat(Round(newValue * 10000000)) / 10000000
    if new_value != rounded_value then
        SetWidgetValue(w, IntToFloat(Round(new_value * steps)) / steps)
        setKnobLabel(w, knob_widget_label_array[index], Round(newValue * steps), knob_widget_label_before[index], knob_widget_start_by_zero_array[index]) 
    end
end

/*on WidgetValueChanged (newValue: double) from out_mode
    if newValue == 1 then
        switchButtonOn(out_midi_L)
        switchButtonOn(out_midi_R)
        switchButtonOff(out_bass_L)
        switchButtonOff(out_bass_R)
    else
        switchButtonOff(out_midi_L)
        switchButtonOn(out_midi_R)
        switchButtonOff(out_bass_L)
        switchButtonOn(out_bass_R)
    end
end*/

on TimerTick(ms : double)
    var x: integer
    if TimeSinceStartup() > start_time + 1000 then
        for x=0; x<Size(delayed_widgets); x=x+1 do
            SetWidgetValue(delayed_widgets[x], 0)
        end 
        ClearArray(delayed_widgets)
    end

    if TimeSinceStartup() > variation_time + 500 then
        events_allowed = true
    end
end
